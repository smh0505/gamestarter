//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub caption: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub developer: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub directory: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub executive: Option<String>,
    pub installed: DateTime,
    pub playtime: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::developer::Entity",
        from = "Column::Developer",
        to = "super::developer::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Developer,
    #[sea_orm(has_many = "super::game_genre::Entity")]
    GameGenre,
    #[sea_orm(has_many = "super::game_tag::Entity")]
    GameTag,
}

impl Related<super::developer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Developer.def()
    }
}

impl Related<super::game_genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameGenre.def()
    }
}

impl Related<super::game_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameTag.def()
    }
}

impl Related<super::genre::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_genre::Relation::Genre.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_genre::Relation::Game.def().rev())
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_tag::Relation::Game.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
